-- a. Find the titles of all books by Pratchett that Price less than $10

	SELECT TITLE
	FROM Book_Info
	WHERE Price < 10 AND AUTHOR Like “%Pratchett%”;

-- b. Give all the titles and their dates of purchase made by a single customer (you choose how to designate the customer)

Select Title, DOT From Book_Info, Transaction_Info, Transaction_Manage
Where Book_Info.ISBN = Transaction_Info.ISBN
And Transaction_Manage.Transaction_ID = Transaction_Info.Transaction_ID
And Transaction_Manage.Customer_ID = 4002037;
-- c. Find the titles and ISBNs for all books with less than 5 copies in stock

	SELECT Book_Info.TITLE, Book_Info.ISBN
	FROM Book_Stock, Book_Info
	WHERE Book_Stock.STOCK < 5;

-- d. Give all the customers who purchased a book by Pratchett and the titles of Pratchett books they purchased

Select First, Last, Title
From Book_Info, Transaction_Manage, Customer, Transaction_Info
Where Transaction_Manage.Customer_ID = Customer.Customer_ID
And Transaction_Manage.Transaction_ID = Transaction_Info.Transaction_ID
And Transaction_Info.ISBN = Book_Info.ISBN
And Author Like "%Pratchett%"


-- e. Find the total number of books purchased by a single customer (you choose how to designate the customer)

	SELECT COUNT(Transaction_Info.ISBN)
	FROM Customer, Transaction_Manage, Transaction_Info
	WHERE Transaction_Manage.Customer_ID = Customer.Customer_ID
	  AND Transaction_Info.Transaction_ID = Transaction_Manage.Transaction_ID
        AND Customer.Customer_ID = "insert unique ID here";


-- f. Find the customer who has purchased the most books and the total number of books they have purchased

SELECT COUNT(Transaction_Info.ISBN), First, Last
FROM Customer, Transaction_Manage, Transaction_Info
WHERE Transaction_Manage.Customer_ID = Customer.Customer_ID
AND Transaction_Info.Transaction_ID = Transaction_Manage.Transaction_ID

GROUP BY Customer.Customer_ID
ORDER BY 1 DESC
LIMIT 1;

	
-- 3 Other Interesting Queries

-- a. Customer who provided the most revenue 
SELECT SUM(Transaction_Info.Price_Book), First, Last
FROM Customer, Transaction_Manage, Transaction_Info
WHERE Transaction_Manage.Customer_ID = Customer.Customer_ID
AND Transaction_Info.Transaction_ID = Transaction_Manage.Transaction_ID

GROUP BY Customer.Customer_ID
ORDER BY 1 DESC
LIMIT 1;

-- b. All of the titles of the book at the Columbus location


SELECT Book_Stock.Title
FROM Book_Stock, Store
WHERE Book_Stock.Store_ID = Store.Store_ID AND Location = 'Columbus';

-- C. The publisher who supplied the most books to the company
Select Name, count(Name)
From Publisher, Book_Background
Where Book_Background.Publisher_ID = Publisher.Publisher_ID
Group By Name
Order By 2 DESC
Limit 1


-- Advanced Queries 
-- a. Provide a list of customer names, along with the total dollar amount each customer has spent.

SELECT SUM(Transaction_Info.Price_Book), First, Last
FROM Customer, Transaction_Manage, Transaction_Info
WHERE Transaction_Manage.Customer_ID = Customer.Customer_ID
AND Transaction_Info.Transaction_ID = Transaction_Manage.Transaction_ID

GROUP BY Customer.Customer_ID
ORDER BY 1 DESC;

-- b. Provide a list of customer names and phone number for customers who have spent more than the average customer.

SELECT Phone, First, Last
FROM Customer, Transaction_Info
GROUP BY First
HAVING SUM(Transaction_Info.Price_Book) >
     (

SELECT AVG(TotalSpent) AS AVGSPEND
FROM Transaction_Info,
     (SELECT SUM(Transaction_Info.Price_Book) AS TotalSpent, First, Last
                        FROM Customer,
                             Transaction_Manage,
                             Transaction_Info
                        WHERE Transaction_Manage.Customer_ID = Customer.Customer_ID
                          AND Transaction_Info.Transaction_ID = Transaction_Manage.Transaction_ID
                        GROUP BY Customer.Customer_ID))

-- c. Provide a list of the titles in the database and associated total copies sold to customers, sorted from the title that has sold the most individual copies to the title that has sold the least.

SELECT Revenue.Title, Num_Sold
FROM Transaction_Info, Book_Stock, Revenue
WHERE Transaction_Info.Stock = Book_Stock.Stock AND Book_Stock.Title = Revenue.Title
GROUP BY Num_Sold
ORDER BY 2 DESC;


-- d. Provide a list of the titles in the database and associated dollar totals for copies sold to customers, sorted from the title that has sold the highest dollar amount to the title that has sold the smallest.

SELECT Revenue.Title, Price_Sold
FROM Transaction_Info, Book_Stock, Revenue
WHERE Transaction_Info.Stock = Book_Stock.Stock AND Book_Stock.Title = Revenue.Title
GROUP BY  Price_Sold
ORDER BY 2 DESC;


-- e. Find the most popular author in the database (i.e. the one who has sold the most books)
SELECT Author
FROM Transaction_Info, Book_Stock, Revenue, Book_Info
WHERE Transaction_Info.Stock = Book_Stock.Stock AND Book_Stock.Title = Revenue.Title AND Book_Info.Price = Transaction_Info.Price_Book
ORDER BY 1 DESC
LIMIT 1;


-- f. Find the most profitable author in the database for this store (i.e. the one who has brought in the most money)

SELECT Author
FROM Transaction_Info, Book_Stock, Revenue, Book_Info
WHERE Transaction_Info.Stock = Book_Stock.Stock AND Book_Stock.Title = Revenue.Title AND Book_Info.Price = Transaction_Info.Price_Book
ORDER BY 1 DESC (
    SELECT *
    FROM Revenue
    GROUP BY Title
    HAVING Revenue.Price_Sold * Revenue.Num_Sold AS TOTAL REVENUE
)

-- g. Provide a list of customer information for customers who purchased anything written by the most profitable author in the database.

SELECT *
FROM Customer 
    (SELECT Author
FROM Transaction_Info, Book_Stock, Revenue, Book_Info
WHERE Transaction_Info.Stock = Book_Stock.Stock AND Book_Stock.Title = Revenue.Title AND Book_Info.Price = Transaction_Info.Price_Book
ORDER BY 1 DESC (
    SELECT *
    FROM Revenue
    GROUP BY Title
    HAVING Revenue.Price_Sold * Revenue.Num_Sold AS TOTAL REVENUE))


-- h. Provide the list of authors who wrote the books purchased by the customers who have spent more than the average customer.

SELECT AUTHOR
FROM BOOK_INFO
(
SELECT Phone, First, Last
FROM Customer, Transaction_Info
GROUP BY First
HAVING SUM(Transaction_Info.Price_Book) >
     (
SELECT AVG(TotalSpent) AS AVGSPEND
FROM Transaction_Info,
     (SELECT SUM(Transaction_Info.Price_Book) AS TotalSpent, First, Last
                        FROM Customer,
                             Transaction_Manage,
                             Transaction_Info
                        WHERE Transaction_Manage.Customer_ID = Customer.Customer_ID
                          AND Transaction_Info.Transaction_ID = Transaction_Manage.Transaction_ID
                        GROUP BY Customer.Customer_ID)))
